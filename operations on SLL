#include <iostream>

using namespace std;

class Node {
public:
    int data;
    Node *next;
};

class LinkedList {
private:
    Node *head;
public:
    LinkedList() { head=NULL; }
    LinkedList(int arr[], int size);
    void display();
    void insert(int position, int data);
    void SortedInsert(int element);
    void deleteSLL(int index);
    int length();
};

LinkedList::LinkedList(int arr[], int size) {
    Node *tail,*t;
    head=new Node;
    head->data=arr[0];
    head->next=NULL;
    tail=head;
    for(int i=1; i<size; i++) {
        t=new Node;
        t->data=arr[i];
        t->next=NULL;
        tail->next=t;
        tail=t;
    }
}

void LinkedList::display() {
    Node *p=head;
    while(p) {
        cout<<p->data<<" ";
        p=p->next;
    }
    cout<<endl;
}

void LinkedList::insert(int position, int element) {
    Node *p=head, *t;
    if(position==0) {
        t= new Node;
        t->data=element;
        t->next=head;
        head=t;
    }
    else {
    for(int i=1; i<position-1; i++)
        p=p->next;
    t= new Node;
    t->data=element;
    t->next=p->next;
    p->next=t;
    }
}

int LinkedList::length() {
    Node *p=head;
    int count=0;
    while(p) {
        count++;
        p=p->next;
    }
    return count;
}

void LinkedList::deleteSLL(int index) {
    Node *q, *p=head, *temp;
    int i=0;
    if(index==0) {
        temp=head;
        head=head->next;
        delete temp;
    }
    else {
        for(i=0; i<index-1; i++) {
            q=p;
            p=p->next;
        }
        q->next=p->next;
        delete p;
    }
}

void LinkedList::SortedInsert(int element) {
    Node *p=head, *temp, *q=NULL;
    int i=0;
    temp=new Node;
        temp->data=element;
        temp->next=NULL;
    if(element < head->data) {
        temp->next=head;
        head=temp;
    }
    else {
        while(p->next!=NULL && element > p->next->data) {
            p=p->next;
        }
        temp->next=p->next;
        p->next=temp;
    }
}

int main() {
    int a;
    int A[10]={1,2,3,4,5,6,7,8,10,11};
    LinkedList SLL(A, 10);
    SLL.display();
    SLL.insert(11, 50);
    SLL.deleteSLL(5);
    SLL.display();
    SLL.SortedInsert(0);
    SLL.display();
}
